name: Deploy Infra
run-name: Deployment for ${{ github.sha }}

on:
  push:
    branches:
      - master
  workflow_dispatch:

permissions: read-all

jobs:
  deploy:
    environment: prod
    runs-on: ubuntu-latest

    env:
      PROJECT_ROOT: ${PWD}
      PYINFRA_INVENTORY: scripts/pyinfra/inventory.py
      PYINFRA_CONFIG: scripts/pyinfra/config.py
      TF_VAR_domain: ${{ vars.TF_VAR_DOMAIN }}
      TF_VAR_hcloud_token: ${{ secrets.TF_VAR_HCLOUD_TOKEN }}
      TF_VAR_hetznerdns_token: ${{ secrets.TF_VAR_HETZNERDNS_TOKEN }}
      TF_VAR_hetzner_deployment_ssh_key: ${{ secrets.TF_VAR_HETZNER_DEPLOYMENT_SSH_KEY }}
      TF_VAR_tailscale_api_key: ${{ secrets.TF_VAR_TAILSCALE_API_KEY }}
      TF_VAR_tailnet: ${{ secrets.TF_VAR_TAILNET }}
      TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
      UPSTREAM_IP: ${{ vars.UPSTREAM_IP }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Write Terraform backend config
        run: |
          cat <<EOF > terraform/backend.tfvars
          access_key = "${{ secrets.TF_S3_ACCESS_KEY }}"
          secret_key = "${{ secrets.TF_S3_SECRET_KEY }}"
          endpoints = { s3 = "${{ vars.TF_S3_ENDPOINT }}" }
          bucket     = "${{ vars.TF_S3_BUCKET }}"
          region     = "${{ vars.TF_S3_REGION }}"
          key        = "infra/terraform.tfstate"
          EOF

      - name: Initialize Terraform
        working-directory: terraform
        run: terraform init -backend-config=backend.tfvars

      - name: Apply Terraform
        working-directory: terraform
        run: terraform apply -auto-approve

      - name: Extract reverse proxy IP
        id: tf_output
        working-directory: terraform
        run: |
          ip=$(terraform output -raw reverse_proxy_droplet_ip)
          echo "ip=$ip" >> $GITHUB_OUTPUT

      - name: Determine if deployment is fresh
        id: check_fresh
        run: |
          if ssh -o StrictHostKeyChecking=no -i <(echo "${{ secrets.SSH_PRIVATE_KEY }}") root@${{ steps.tf_output.outputs.ip }} 'id deploy' 2>/dev/null; then
            echo "fresh=false" >> $GITHUB_OUTPUT
          else
            echo "fresh=true" >> $GITHUB_OUTPUT
          fi

      - name: Sync and activate environment
        run: |
          uv sync
          source .venv/bin/activate

      - name: Generate config files
        run: |
          uv run scripts/generate_tailscale_acl.py
          uv run scripts/generate_caddyfile.py

      - name: Deploy to VPS with PyInfra
        run: |
          CMD="uv run scripts/deploy_reverse_proxy.py"
          if [ "${{ steps.check_fresh.outputs.fresh }}" = "true" ]; then
            CMD="$CMD --fresh"
          fi
          eval "$CMD"